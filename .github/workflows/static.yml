# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'projects/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Determine changed projects
        id: changed
        run: |
          set -euo pipefail
          # Determine a base commit for the diff
          if [ -n "${{ github.event.before }}" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            BASE="${{ github.event.before }}"
          else
            BASE=$(git rev-parse HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          fi
          # Ensure BASE exists in the local clone (handle shallow clones / rebases)
          if ! git cat-file -e "$BASE^{commit}" 2>/dev/null; then
            BASE=$(git rev-parse HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          fi
          CHANGED=$(git diff --name-only "$BASE" HEAD | awk -F/ '/^projects\/[A-Za-z0-9_.-]+\// {print $2}' | sort -u | tr '\n' ' ')
          echo "projects=$CHANGED" >> "$GITHUB_OUTPUT"
          echo "Changed projects: $CHANGED"
      - name: Build changed projects and stage into dist/
        if: steps.changed.outputs.projects != ''
        run: |
          set -euo pipefail
          mkdir -p dist
          for proj in ${{ steps.changed.outputs.projects }}; do
            dir="projects/$proj"
            if [ -f "$dir/package.json" ]; then
              echo "Building $dir"
              (cd "$dir" && bun install --silent && bun run build)
              mkdir -p "dist/$proj"
              cp -R "$dir/dist/." "dist/$proj/"
            else
              echo "Skipping $dir (no package.json)"
            fi
          done
          echo "Staged projects:"
          ls -la dist
      - name: Skip (no project changes)
        if: steps.changed.outputs.projects == ''
        run: echo "No changes under projects/*; skipping build and deploy."
      - name: Setup Pages
        if: steps.changed.outputs.projects != ''
        uses: actions/configure-pages@v5
      - name: Upload artifact
        if: steps.changed.outputs.projects != ''
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload dist folder
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        if: steps.changed.outputs.projects != ''
        uses: actions/deploy-pages@v4
